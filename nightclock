#!/usr/bin/env python

# 2022.03.22 v1.04.00 last for pyglet v1
# 2022.01.31 v1.00

# todo:
# watering (Plant.water)

import datetime
import math
import random

import pyglet
from pyglet.window import key
import pyglet.media



#@window1.event
#def on_draw():

class WindowMain(pyglet.window.Window):
    def __init__(self):
        display = pyglet.canvas.get_display()
        screen = display.get_default_screen()
        super().__init__(width=screen.width, height=screen.height, style=pyglet.window.Window.WINDOW_STYLE_BORDERLESS)
        self.set_location(0,0)
        self.keys = key.KeyStateHandler()
        self.push_handlers(self.keys)

    def on_draw(self):
        self.clear()
        batch1.draw()

    def on_expose(self):
        self.on_draw()

    def on_mouse_press(self, x, y, buttons, mods):
        if buttons & pyglet.window.mouse.LEFT:
            for b in gui_buttons:
                if b.inside(x, y):
                    b.press()


window1 = WindowMain()

batch1 = pyglet.graphics.Batch()
plants_plane = pyglet.graphics.Group(order=0)
actors_plane = pyglet.graphics.Group(order=1)
clock_plane = pyglet.graphics.Group(order=2)


def add_rain():
    music_bg = pyglet.media.SourceGroup()
    n = round(4*3600/music_rain.duration)
    for i in range(n):
        music_bg.add(music_rain)
    player_bg.play()
    player_bg.queue(music_bg)


player_bg = pyglet.media.Player()
music_rain = pyglet.media.load('/home/oda/RainyMood_short2.ogg', streaming=False)
#music_rain = pyglet.media.load('/home/oda/1.ogg', streaming=False)
player_bg.push_handlers(on_player_eos=add_rain)


def toggle_rain():
    if player_bg.playing:
        player_bg.pause()
    else:
        if not player_bg.source:
            add_rain()
        player_bg.play()


class RoundButton:
    width = 30
    coloroff = (64, 64, 64)
    coloron = (128, 128, 0)

    def __init__(self, x, y, sub, on=False):
        self.x = x
        self.y = y
        self.sub = sub
        self.on = on
        color = self.coloron if on else self.coloroff
        self.parts = [
            pyglet.shapes.Circle(x, y, self.width/2, color=color, batch=batch1),
        ]

    def inside(self, x, y):
        return (x-self.x)**2 + (y-self.y)**2 <= (self.width/2)**2

    def enable(self, on=True):
        self.on = on
        self.parts[0].color = self.coloron if on else self.coloroff

    def toggle(self):
        self.enable(not self.on)

    def press(self):
        self.toggle()
        self.sub()


class RainButton(RoundButton):
    color = (0, 0, 128)
    def __init__(self, *ar, **kw):
        super().__init__(*ar, sub=toggle_rain, **kw)
        dx = 1
        dy = 4
        r = self.width*0.2
        x1 = self.x-r
        y = self.y+r/2
        x2 = self.x+r
        y3 = self.y-r
        kw = dict(width=2, color=self.color, batch=batch1)
        self.parts.extend((
            pyglet.shapes.Line(x1-dx, y+dy, x1+dx, y-dy, **kw),
            pyglet.shapes.Line(x2-dx, y+dy, x2+dx, y-dy, **kw),
            pyglet.shapes.Line(self.x-dx, y3+dy, self.x+dx, y3-dy, **kw),
        ))


gui_buttons = [RainButton(1000, 900)]

next_y = (window1.height)*2//3

time_label = pyglet.text.Label(
    text='00:00:00',
    font_size=72, color=(0,128,0,255),
    x = window1.width//2,
    y = next_y,
    anchor_x='center', batch=batch1, group=clock_plane)

big_font_size = 72*(window1.width*3//4)/time_label.content_width
time_label.font_size = big_font_size

next_y += -32 - time_label.content_height//2

date_label = pyglet.text.Label(text='0000-00-00',
    font_size=big_font_size//3, color=(0,128,0,255),
    x=window1.width//2, y=next_y,
    anchor_x='center', batch=batch1, group=clock_plane)



class Movable:
    group = actors_plane

    def __init__(self, x, y, *ar, **kw):
        self.x = x
        self.y = y
        self.parts = []
        super().__init__(*ar,**kw)

    def delete(self):
        for p in self.parts:
            p.delete()

    def move(self, dx, dy):
        self.x += dx
        self.y += dy
        for p in self.parts:
            if hasattr(p, 'move'):
                p.move(dx, dy)
            else:
                p.x += dx
                p.y += dy
                if hasattr(p, 'x2'):
                    p.x2 += dx
                    p.y2 += dy

    def moveto(self, x, y):
        self.move(x-self.x, y-self.y)


class Plant(Movable):
    group = plants_plane

    def __init__(self, x, y, height=0, *ar, **kw):
        super().__init__(x, y, *ar, **kw)
        self.height = height
        self.dead = False
        self.age = 0
        self.max_age = random.uniform(self.max_age*0.7, self.max_age*1.4)
        self.water = 0  #!!! implement watering
        self.need_water()
        self.stem = pyglet.shapes.Line(x, y, x, y+height, width=self.width,
            color=self.stemcolor, batch=batch1, group=self.group)
        self.parts.append(self.stem)

    def need_water(self):
        self.need = random.uniform(5,20)


class Flower(Movable):
    group = plants_plane
    centercolor = (255, 255, 0)
    leafcolor = (128, 128, 128)
    leaves_count = 7

    def __init__(self, x, y, size, *ar, **kw):
        super().__init__(x, y, *ar, **kw)
        self.size = size
        self.dead = False
        x = self.x
        y = self.y
        w = self.size
        for i in range(self.leaves_count):
            angle = math.radians( 360*i//self.leaves_count )
            dx = self.size*4*math.cos(angle)
            dy = self.size*4*math.sin(angle)
            l = pyglet.shapes.Line(x, y, x+dx, y+dy, width=self.size*2,
                color=self.leafcolor, batch=batch1, group=self.group)
            self.parts.append(l)
        self.parts.append( pyglet.shapes.Circle(x, y, w*2,
            color=self.centercolor, batch=batch1, group=self.group) )

    def wither(self):
        if self.parts:
            if len(self.parts) == 1:
                i = 0
            else:
                i = random.randint(0, len(self.parts)-2)
            self.parts[i].delete()
            del(self.parts[i])
        else:
            self.dead = True
        return self.dead


class FlowerPlant(Plant):
    max_height = 20
    width = 2
    stemcolor = (0, 128, 0)
    max_age = 600

    def __init__(self, *ar, **kw):
        super().__init__(*ar, **kw)
        self.flower = None
        self.dead = False

    def bloom(self):
        self.flower = Flower(self.x, self.y + self.height, self.width)
        self.parts.append(self.flower)

    def grow(self, dt):
        self.need -= dt
        if self.need < 0:
            self.stem.y2 += 1
            for l in (i for i in self.parts if i is not self.stem):
                l.move(0, 1)
            self.height += 1
            if(not self.flower and self.height >= self.max_height//2):
                self.bloom()
            self.need_water()

    def wither(self, dt):
        self.max_age += random.uniform(self.max_age*0.03, self.max_age*0.06)
        if self.flower.wither():
            self.dead = True

    def update(self, dt):
        self.age += dt
        if self.age > self.max_age:
            self.wither(dt)
        elif self.height < self.max_height:
            self.grow(dt)


class Head(Movable):
    def __init__(self, x, y, width, color, *ar, **kw):
        super().__init__(x, y, *ar, **kw)
        self.width = width
        self.color = color
        i = pyglet.shapes.Circle(x, y, width/2,
            color=color, batch=batch1, group=self.group)
        self.parts.append(i)


class Limb(Movable):
    def __init__(self, x, y, size, width, color, *ar, **kw):
        super().__init__(x, y, *ar, **kw)
        self.size = size
        self.width = width
        self.color = color
        self.holding = []
        i = pyglet.shapes.Line(self.x, self.y,
            self.x, self.y-self.size, width=self.width,
            color=self.color, batch=batch1, group=self.group)
        self.parts.append(i)
        self.angle = 0

    def end(self):
        return (self.parts[0].x2, self.parts[0].y2)

    def set_angle(self, angle):
        self.angle = angle
        radians = math.radians(270+angle)
        dx = math.cos(radians)*self.size
        dy = math.sin(radians)*self.size
        l = self.parts[0]
        l.x2 = l.x+dx
        l.y2 = l.y+dy
        for i in self.holding:
            i.moveto(*self.end())

    def align(self, goal, step):
        done = False
        a = self.angle
        sign = 1 if self.angle < goal else -1
        a += step*sign
        if (goal-a)*sign < 0:
            a = goal
            done = True
        self.set_angle(a)
        return done

    def hold(self, tool):
        self.parts.append(tool)
        self.holding.append(tool)
        tool.moveto(*self.end())


class HumanBody(Movable):
    def __init__(self, x, y, size, width, color, *ar, **kw):
        super().__init__(x, y, *ar, **kw)
        self.size = size
        i = pyglet.shapes.Line(x, y-size/2, x, y+size/2, width=width,
            color=color, batch=batch1, group=self.group)
        self.parts.append(i)


class Actor:
    phasemax = 1000

    def __init__(self, *ar, **kw):
        self.actions = []
        super().__init__(*ar, **kw)

    def tag_active(self, tag):
        for a in self.actions:
            if tag in a['tags']:
                return 1

    def block_actions(self, tags, prio):
        bad = []
        for a in self.actions:
            for t in a['tags']:
                if t in tags:
                    if prio >= a.prio:
                        bad.append(a)
                        break
                    else:
                        return 0
        for a in bad:
            self.actions.remove[a]
        return 1

    def add_action(self, name, tags, prio=10):
        if not self.block_actions(tags, prio):
            return None
        sub = getattr(self,'a_'+name)
        action = {'name': name, 'sub': sub, 'tags': tags, 'prio': prio, 'phase': 0}
        self.actions.append(action)
        return action

    def end_action(self, action):
        if action in self.actions:
            self.actions.remove(action)

    def do_actions(self, dt):
        for a in self.actions:
            a['sub'](dt, a)

    def update(self, dt):
        self.do_actions(dt)


class Walker(Actor):
    def do_stop(self):
        action = self.add_action('stop', ['move','legs'], 10)
        if action:
            self.speed = self.speedmax

    def a_stop(self, dt, action):
        da = 100*self.speed/self.size*dt
        done = True
        for l in self.legs:
            done = l.align(0, da) and done
        if not self.tag_active('arms'):
            for l in self.arms:
                done = l.align(0, da) and done
        if done:
            self.end_action(action)

    def do_walk(self, x):
        action = self.add_action('walk', ['move', 'legs'], 10)
        if action:
            action['destx'] = x
            if (x-self.x)*self.dir < 0:
                self.dir = -self.dir
            self.speed = self.speedmax

    def limbs_angle(self, limbs, angle):
        for i in range(0,len(limbs),2):
            limbs[i].set_angle(angle)
        for i in range(1,len(limbs),2):
            limbs[i].set_angle(-angle)

    def a_walk(self, dt, action):
        dx = self.speed*dt*self.dir
        if (action['destx']-self.x-dx)*self.dir < 0:
            dx = action['destx']-self.x
            self.move(dx, 0)
            self.end_action(action)
            self.do_stop()
            return
        self.move(dx, 0)
        phase = action['phase']
        phasehalf = self.phasemax // 2
        angle = phase if phase < phasehalf else self.phasemax - phase
        angle = angle*180/4/phasehalf - 90/4
        self.limbs_angle(self.legs, angle)
        if not self.tag_active('arms'):
            self.limbs_angle(self.arms, angle)
        phase += self.speed * dt * self.phasemax / 100
        action['phase'] = phase % self.phasemax

    def do_promenade(self):
        action = self.add_action('promenade', ['goal'], 100)
        if action:
            action['now'] = None

    def a_promenade(self, dt, action):
        if action['now'] == 'idle':
            action['duration'] -= dt
            if action['duration'] <= 0 and not self.tag_active('move'):
                action['now'] = 'move'
                x = random.uniform(0, window1.width)
                self.do_walk(x)
        elif action['now'] == 'move':
            if not self.tag_active('move'):
                action['now'] = ''
        else:
            action['now'] = 'idle'
            action['duration'] = random.uniform(2, 5)


class PoleTool(Movable):
    width = 4
    size = 120
    color = (150, 50, 0)

    def __init__(self, x, y, size=None, hold=50, angle=0, *ar, **kw):
        super().__init__(x, y, *ar, **kw)
        self.size = self.size if size is None else size
        self.hold = hold
        self.angle = angle
        p = pyglet.shapes.Line(*self.coords(), width=self.width,
            color=self.color, batch=batch1, group=self.group)
        self.parts.append(p)

    def coords(self):
        radians = math.radians(self.angle)
        dx = math.cos(radians)
        dy = math.sin(radians)
        l1 = self.size*self.hold/100
        l2 = self.size-l1
        return (self.x-dx*l1, self.y-dy*l1, self.x+dx*l2, self.y+dy*l2)


class Human(Movable,Walker):
    group = actors_plane
    size_base = 150
    size = size_base
    width = 10
    body_size = size*30/82
    arms_shift = body_size/20
    legs_shift = body_size/10
    arms_size = body_size
    legs_size = size*40/82+legs_shift
    head_size = size*12/82
    body_color = (0,128,128)
    limb_color = (128,128,0)
    speedmax = 50

    def __init__(self, x=0, y=0, dir=1):
        super().__init__(x, y)
        self.dir=dir
        ya = self.arms_level()
        yl = self.legs_level()
        a1 = Limb(x, ya, self.arms_size, width=self.width/2, color=self.limb_color)
        l1 = Limb(x, yl, self.legs_size, width=self.width/2, color=self.limb_color)
        b = self.body = HumanBody(x, y, self.body_size, self.width, self.body_color)
        h = self.head = Head(x, y+(self.body_size+self.head_size)/2, self.head_size, self.body_color)
        l2 = Limb(x, yl, self.legs_size, width=self.width/2, color=self.limb_color)
        a2 = Limb(x, ya, self.arms_size, width=self.width/2, color=self.limb_color)
        self.legs = [l1,l2]
        self.arms = [a1,a2]
        self.parts.extend((b,h,l1,l2,a1,a2))

#!!! todo resize
    def resize(self, size=None, scale=1):
        ground = self.ground()
        if size is None:
            size = self.size_base*scale
        else:
            scale = size/self.size_base
        self.size = size

    def arms_level(self):
        return self.y + self.body_size/2 - self.arms_shift

    def legs_level(self):
        return self.y - self.body_size/2 + self.legs_shift

    def ground(self):
        return self.legs_level() - self.legs_size


class Field(Movable):
    def __init__(self, y, *ar, **kw):
        super().__init__(0, y, *ar, **kw)
        self.wait_next()

    def wait_next(self):
        self.wait = random.uniform(30, 60)

    def grow(self):
        x = random.randint(30, window1.width-30)
        for p in self.parts:
            if abs(p.x-x) < 10:
                return
        self.parts.append( FlowerPlant(x, self.y, 0) )

    def update(self, dt):
        dead = []
        for i in self.parts:
            i.update(dt)
            if i.dead:
                dead.append(i)
        for i in dead:
            self.parts.remove(i)
        self.wait -= dt
        if self.wait < 0:
            self.grow()
            self.wait_next()



human1 = Human(100, 200)
human1.do_promenade()
flowers = Field(human1.ground() + 10)
pole1 = PoleTool(100, 100, angle=70)
human1.arms[1].hold(pole1)

def update(dt):
    t=str(datetime.datetime.now())
    time_label.text=t[11:19]
    date_label.text=t[:11]
    human1.update(dt)
    dt *= 20    #debug!!!
    flowers.update(dt)
    if window1.keys[key.UP]:
        human1.move(0, 10)
        flowers.move(0,10)
    elif window1.keys[key.DOWN]:
        human1.move(0, -10)
        flowers.move(0,-10)


if __name__ == '__main__':
    update(0)
    pyglet.clock.schedule_interval(update, 1/20)
    pyglet.app.run()
